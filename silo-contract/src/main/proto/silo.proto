//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
import "google/protobuf/timestamp.proto";
package pt.tecnico.sauron.silo.grpc;
option java_multiple_files = true;

// TODO: Add vector timestamp to requests and responses

//#region shared
enum Target {
    CAR = 0;
    PERSON = 1;
}



message Observation {
    Target target  = 1;
    string id = 2;
    google.protobuf.Timestamp ts = 3;
    string camera_name = 4;
}
//#endregion

//#region init
message InitRequest {}
message InitResponse {}
//#endregion

//#region ping
message PingRequest {}
message PingResponse {}
//#endregion

//#region clear
message ClearRequest {
    repeated uint32 timestamp = 1;
    string id = 4;
}
message ClearResponse {}
//#endregion

//#region report
message ReportRequest {
    string camera_name = 1;
    repeated Observation observations = 2;
}

message ReportResponse {}
//#endregion

//#region cam_join
message CamJoinRequest {
    string camera_name = 1;
    float latitude = 2;
    float longitude = 3;
}

message CamJoinResponse {}
//#endregion

//#region cam_info
message CamInfoRequest {
    string camera_name = 1;
};

message CamInfoResponse {
    float latitude = 1;
    float longitude = 2;
};
//#endregion

//#region track
message TrackRequest {
    Target target = 1;
    string id = 2;
}

message TrackResponse {
    Observation observation = 1;
}
//#endregion

//#region trackMatch
message TrackMatchRequest {
    Target target = 1;
    string id = 2;
}

message TrackMatchResponse {
    repeated Observation observations = 1;
}
//#endregion

//#region trace
message TraceRequest {
    Target target = 1;
    string id = 2;
}

message TraceResponse {
    repeated Observation observations = 1;
}
//#endregion

//# Gossip modifications
message QueryRequest {
    repeated uint32 timestamp = 1;
    oneof Operation {
        TrackRequest trackRequest = 2;
        TrackMatchRequest trackMatchRequest = 3;
    }
}

message QueryResponse {
    repeated uint32 timestamp = 1;
    oneof Response {
        TrackResponse trackResponse = 2;
        TrackMatchResponse trackMatchResponse = 3;
    }
}

message UpdateRequest {
    repeated uint32 timestamp = 1;
    string id = 2;
    oneof Operation {
        ClearRequest clearRequest = 3;
        ReportRequest reportRequest = 4;
    }
}

message LogRecord {
    uint32 replica = 1;
    repeated uint32 timestamp = 2;
    UpdateRequest updateRequest = 3;
}

message UpdateResponse {
   repeated uint32 timestamp = 1;
}

message GossipRequest {
    uint32 timestamp = 1;
    repeated LogRecord log = 2;
}

message GossipResponse {

}

service Silo {
    rpc ctrl_init(InitRequest)          returns(InitResponse);
    rpc cam_info(CamInfoRequest)        returns(CamInfoResponse);
    rpc cam_join(CamJoinRequest)        returns(CamJoinResponse);
    rpc ctrl_clear(ClearRequest)        returns(ClearResponse);
    rpc ctrl_ping(PingRequest)          returns(PingResponse);
    rpc report(ReportRequest)           returns(ReportResponse);
    rpc track(TrackRequest)             returns(TrackResponse);
    rpc trackMatch(TrackMatchRequest)   returns(TrackMatchResponse);
    rpc trace(TraceRequest)             returns(TraceResponse);
    rpc update(UpdateRequest)           returns(UpdateResponse);

    rpc query(QueryRequest)             returns(QueryResponse);
    rpc gossip(GossipRequest)           returns(GossipResponse);
}